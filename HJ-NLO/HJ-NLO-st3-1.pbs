###########################################################################
#!/bin/bash
###########################################################################
#
#PBS -A quill
#PBS -m abe
#PBS -M daniel.quill.14@ucl.ac.uk
#PBS -l nodes=1:ppn=4

###PBS -l procs=4
#PBS -q medium
#
###########################################################################
#
nScripts=20
scriptNumber=1
nJobs=4
startSeed=$(( ( nJobs*(scriptNumber-1) ) + 1 ))
startSeedOriginal=$startSeed
endSeed=$((startSeed+nJobs-1))
maxBigLoops=1
do_st1=1
do_st2=1
do_NLOplots=1
do_st3=1
do_st4=0
do_rwgt=0
do_lhef=0
do_py6=0
do_py8=0

# Tidy up
mv pwgcounters-st2-*.dat               technical-outputs/
mv pwg-st2-*-stat.dat                  technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
mv run-st2-*.log                       log-files/
mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   technical-outputs/
mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  technical-outputs/
mv pwg-*NLO.top                        NLO-output

###########################################################################
# Get the name of the directory we're submitting this script from.
basedir=$PBS_O_WORKDIR
# Tell the current worker node to go into it.
cd $basedir
#
# Check we have executables and a powheg.input-save input file.
if [ ! -e pwhg_main ] ; then
    echo ; echo "Could not find $PWD/pwhg_main executable. Quitting." ; echo
    exit
fi
if [ ! -e powheg.input-save ] ; then
    echo ; echo "Could not find $PWD/powheg.input-save input file. Quitting." ; echo
    exit
fi
#
###########################################################################
###########################################################################
#                                                                         #
#        Determine upper bounding envelope for veto algorithm             #
#                                                                         #
###########################################################################
###########################################################################

if [ $scriptNumber -eq 1 ] ; then

	(echo -n ' ' ) >> Timings/Timings-initialisation.txt
	(echo -n Starting st3 ' ' ; date ) >> Timings/Timings-initialisation.txt
	cat powheg.input-save | sed 's/parallelstage.*/parallelstage 3/' > powheg.input
fi

#Â DQ - loop over NLO bits
for NLOLoop in `seq 1 $maxNLOLoops`
do

for i in `seq $startSeed $endSeed`
do
echo $i | ./pwhg_main > run-st3-$i.log 2>&1 &
done
wait

startSeed=$((startSeed+(nJobs*nScripts)))
endSeed=$((startSeed+nJobs-1))

done # Finish the NLOLoop
wait

if [ $scriptNumber -eq $nScripts ] ; then
	(echo -n Ending   st3 ' ' ; date ) >> Timings/Timings-initialisation.txt
fi

###########################################################################
# Tidy up
#mv pwgcounters-st3-*.dat    technical-outputs/
#mv pwg-st3-*-stat.dat       technical-outputs/
#mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
#mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
#mv run-st3-*.log            log-files/
#mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   technical-outputs/
#mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  technical-outputs/
