###########################################################################
#!/bin/bash
###########################################################################
#
#PBS -A quill
#PBS -m abe
#PBS -M daniel.quill.14@ucl.ac.uk
#PBS -l nodes=3:ppn=4

###PBS -l procs=24
#PBS -q long
#
###########################################################################
#
nJobs=24 # Needs to be a multiple of nNodes * nPPN
nNodes=3
nPPN=4
nJobsPerLoop=$((nNodes * nPPN))
startSeedNLO=1
startSeedNLO_original=$startSeedNLO
endSeedNLO=$((startSeedNLO+nJobsPerLoop-1))
maxNLOLoops=2
#
startSeed=1
endSeed=$((startSeed+nJobs-1))
maxBigLoops=1
#
do_st1=1
do_st2=1
do_NLOplots=1
do_st3=1
do_st4=0
do_rwgt=0
do_lhef=0
do_py6=0
do_py8=0
#
###########################################################################
#
echo -e "\nJob running parameters:\n"
echo -e "nJobs = $nJobs"
echo -e "Starting seed = $startSeed"
echo -e "Ending seed   = $endSeed  "
###########################################################################
# Get the name of the directory we're submitting this script from.
basedir=$PBS_O_WORKDIR
# Tell the current worker node to go into it.
cd $basedir
#
###########################################################################
# Make a directory to keep all of the technical files in to limit clutter.
# Will only do this on the initialisation script
mkdir -p  technical-outputs
mkdir -p  log-files
mkdir -p  Timings
mkdir -p combined-output
mkdir -p NLO-output
mkdir -p pwhgalone-output
mkdir -p LHEF-output
mkdir -p PYTHIA6-output
mkdir -p PYTHIA8-output
#
###########################################################################
# Start a file to track how long things take.
> Timings/Timings-initialisation.txt
#
###########################################################################
# Check we have executables and a powheg.input-save input file.
if [ ! -e pwhg_main ] ; then
    echo ; echo "Could not find $PWD/pwhg_main executable. Quitting." ; echo
    exit
fi
if [ ! -e powheg.input-save ] ; then
    echo ; echo "Could not find $PWD/powheg.input-save input file. Quitting." ; echo
    exit
fi
#
###########################################################################
###########################################################################
#                                                                         #
#                 Determine importance sampling grids                     #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_st1 -eq 1 ] ; then
#
# Do two stages of importance sampling grid calculation.
# Expect ~3 mins to run for a single CPU ncall1=1,000,000 interation.
#
for igrid in {1..2}
do

(echo -n ' ' ) >> Timings/Timings-initialisation.txt
(echo -n Starting st1 xg$igrid ' ' ; date ) >> Timings/Timings-initialisation.txt

# DQ - loop over NLO bits
for NLOLoop in `seq 1 $maxNLOLoops`
do

cat powheg.input-save | sed "s/xgriditeration.*/xgriditeration $igrid/ ; s/parallelstage.*/parallelstage 1/" > powheg.input

for i in `seq $startSeedNLO $endSeedNLO`
do
echo $i | ./pwhg_main > run-st1-xg$igrid-$i.log 2>&1 &
done
wait

# Increment the NLO seeds so that we don't use the same ones again
startSeedNLO=$((endSeedNLO+1))
endSeedNLO=$((startSeedNLO+nJobsPerLoop-1))

done # Finish the NLOLoop
wait

# Go back to original NLO seeds for next stage
startSeedNLO=$startSeedNLO_original
endSeedNLO=$((startSeedNLO+nJobsPerLoop-1))

(echo -n ' ' ) >> Timings/Timings-initialisation.txt
(echo -n Ending   st1 xg$igrid ' ' ; date ) >> Timings/Timings-initialisation.txt
#
###########################################################################
# Tidy up
mv pwgcounters-st1-*.dat    technical-outputs/
mv pwg-xg*-*-btlgrid.top    technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
if [ $igrid -eq 2 ] ; then
    mv pwggridinfo-btl-xg1-*.dat technical-outputs/
    mv run-st1-xg*.log           log-files/
fi
if [ $igrid -eq 3 ] ; then
    mv pwggridinfo-btl-xg2-*.dat technical-outputs/
    mv run-st1-xg*.log           log-files/
fi
done
#
fi
#
###########################################################################
###########################################################################
#                                                                         #
#        NLO integration and determination of Btilde upper bound          #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_st2 -eq 1 ] ; then
#
# Compute NLO and upper bounding envelope for underlying born comfigurations.
# Expect ~14 mins to run on a single CPU ncall2=4,000,000 and itmx2=4.
if [ $do_NLOplots -eq 1 ] ; then
   cat powheg.input-save | sed 's/parallelstage.*/parallelstage 2/ ; s/testplots.*/testplots 1/' > powheg.input
else
   cat powheg.input-save | sed 's/parallelstage.*/parallelstage 2/ ; s/testplots.*/testplots 0/' > powheg.input
fi
(echo -n ' ' ) >> Timings/Timings-initialisation.txt
(echo -n Starting st2 ' ' ; date ) >> Timings/Timings-initialisation.txt

# DQ - loop over NLO bits
for NLOLoop in `seq 1 $maxNLOLoops`
do

for i in `seq $startSeedNLO $endSeedNLO`
do
echo $i | ./pwhg_main > run-st2-$i.log 2>&1 &
done
wait

startSeedNLO=$((endSeedNLO+1))
endSeedNLO=$((startSeedNLO+nJobsPerLoop-1))

done # Finish the NLOLoop
wait

# Go back to original NLO seeds for next stage
startSeedNLO=$startSeedNLO_original
endSeedNLO=$((startSeedNLO+nJobsPerLoop-1))

#
###########################################################################
# Tidy up
mv pwgcounters-st2-*.dat               technical-outputs/
mv pwg-st2-*-stat.dat                  technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
mv run-st2-*.log                       log-files/
mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   technical-outputs/
mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  technical-outputs/
mv pwg-*NLO.top			       NLO-output
#
(echo -n Ending   st2 ' ' ; date ) >> Timings/Timings-initialisation.txt
#
fi
#
###########################################################################
###########################################################################
#                                                                         #
#        Determine upper bounding envelope for veto algorithm             #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_st3 -eq 1 ] ; then
#
# Compute upper bounding coefficients for radiation.
# Expect ~5 mins to run on a single CPU nubound=1,000,000.
cat powheg.input-save | sed 's/parallelstage.*/parallelstage 3/' > powheg.input
(echo -n ' ' ) >> Timings/Timings-initialisation.txt
(echo -n Starting st3 ' ' ; date ) >> Timings/Timings-initialisation.txt

# DQ - loop over NLO bits
for NLOLoop in `seq 1 $maxNLOLoops`
do

for i in `seq $startSeedNLO $endSeedNLO`
do
echo $i | ./pwhg_main > run-st3-$i.log 2>&1 &
done
wait

startSeedNLO=$((endSeedNLO+1))
endSeedNLO=$((startSeedNLO+nJobsPerLoop-1))

done # Finish the NLOLoop
wait

# Go back to original NLO seeds for next stage
startSeedNLO=$startSeedNLO_original
endSeedNLO=$((startSeedNLO+nJobsPerLoop-1))

(echo -n Ending   st3 ' ' ; date ) >> Timings/Timings-initialisation.txt
#
###########################################################################
# Tidy up
mv pwgcounters-st3-*.dat    technical-outputs/
mv pwg-st3-*-stat.dat       technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
mv run-st3-*.log            log-files/
mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   technical-outputs/
mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  technical-outputs/
#
fi
#