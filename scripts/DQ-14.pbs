###########################################################################
#!/bin/bash
###########################################################################
#
#PBS -A quill
#PBS -m abe
#PBS -M daniel.quill.14@ucl.ac.uk
#PBS -l nodes=1:ppn=4

###PBS -l procs=4
#PBS -q long
#
###########################################################################
#
nScripts=15
scriptNumber=14
nJobs=4
startSeed=$(( ( nJobs*(scriptNumber-1) ) + 1 ))
endSeed=$((startSeed+nJobs-1))
maxBigLoops=20
do_st1=0
do_st2=0
do_NLOplots=0
do_st3=0
do_st4=1
do_rwgt=1
do_lhef=1
do_py6=0
do_py8=1
#
###########################################################################
#
echo -e "\nJob running parameters:\n"
echo -e "nJobs = $nJobs"
echo -e "Starting seed = $startSeed"
echo -e "Ending seed   = $endSeed  "
###########################################################################
# Get the name of the directory we're submitting this script from.
basedir=$PBS_O_WORKDIR
# Tell the current worker node to go into it.
cd $basedir
#
###########################################################################
# Make a directory to keep all of the technical files in to limit clutter.
# Will only do this on the initialisation script
if [ $scriptNumber -eq 0 ] ; then
	mkdir -p  technical-outputs
	mkdir -p  log-files
	mkdir -p  Timings
fi
#
###########################################################################
# Start a file to track how long things take.
> Timings/Timings-14.txt
#
###########################################################################
# Check we have executables and a powheg.input-save input file.
if [ ! -e pwhg_main ] ; then
    echo ; echo "Could not find $PWD/pwhg_main executable. Quitting." ; echo
    exit
fi
if [ ! -e powheg.input-save ] ; then
    echo ; echo "Could not find $PWD/powheg.input-save input file. Quitting." ; echo
    exit
fi
#
###########################################################################
###########################################################################
#                                                                         #
#                 Determine importance sampling grids                     #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_st1 -eq 1 ] ; then
#
# Do two stages of importance sampling grid calculation.
# Expect ~3 mins to run for a single CPU ncall1=1,000,000 interation.
for igrid in {1..2}
do

(echo -n ' ' ) >> Timings/Timings-14.txt
(echo -n Starting st1 xg$igrid ' ' ; date ) >> Timings/Timings-14.txt

cat powheg.input-save | sed "s/xgriditeration.*/xgriditeration $igrid/ ; s/parallelstage.*/parallelstage 1/" > powheg.input

for i in `seq $startSeed $endSeed`
do
echo $i | ./pwhg_main > run-st1-xg$igrid-$i.log 2>&1 &
done
wait

(echo -n ' ' ) >> Timings/Timings-14.txt
(echo -n Ending   st1 xg$igrid ' ' ; date ) >> Timings/Timings-14.txt
#
###########################################################################
# Tidy up
mv pwgcounters-st1-*.dat    technical-outputs/
mv pwg-xg*-*-btlgrid.top    technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
if [ $igrid -eq 2 ] ; then
    mv pwggridinfo-btl-xg1-*.dat technical-outputs/
    mv run-st1-xg*.log           log-files/
fi
if [ $igrid -eq 3 ] ; then
    mv pwggridinfo-btl-xg2-*.dat technical-outputs/
    mv run-st1-xg*.log           log-files/
fi
done
#
fi
#
###########################################################################
###########################################################################
#                                                                         #
#        NLO integration and determination of Btilde upper bound          #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_st2 -eq 1 ] ; then
#
# Compute NLO and upper bounding envelope for underlying born comfigurations.
# Expect ~14 mins to run on a single CPU ncall2=4,000,000 and itmx2=4.
if [ $do_NLOplots -eq 1 ] ; then
   cat powheg.input-save | sed 's/parallelstage.*/parallelstage 2/ ; s/testplots.*/testplots 1/' > powheg.input
else
   cat powheg.input-save | sed 's/parallelstage.*/parallelstage 2/ ; s/testplots.*/testplots 0/' > powheg.input
fi
(echo -n ' ' ) >> Timings/Timings-14.txt
(echo -n Starting st2 ' ' ; date ) >> Timings/Timings-14.txt
for i in `seq $startSeed $endSeed`
do
echo $i | ./pwhg_main > run-st2-$i.log 2>&1 &
done
wait
#
###########################################################################
# Tidy up
mv pwgcounters-st2-*.dat               technical-outputs/
mv pwg-st2-*-stat.dat                  technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
mv run-st2-*.log                       log-files/
mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   technical-outputs/
mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  technical-outputs/
#
# ###########################################################################
# # Merge any NLO analysis files that came out
echo ""
# mkdir -p combined-output
NLOFilesToCombine=`ls pwg-[0-9][0-9][0-9][0-9]-NLO.top`
# if [ "$NLOFilesToCombine" = "" ] ; then
#    echo "Finished st2 and found no pwg\*NLO.top files to merge."
# else
#    echo "About to merge files: "$NLOFilesToCombine
#    rm -rf fort.12
#    ./mergedata 1 $NLOFilesToCombine
#    mv fort.12 pwgNLO-$startSeed-$endSeed-mode-1.top
#    echo "Output file = "`ls pwgNLO-$startSeed-$endSeed-mode-1.top`
#    rm -rf fort.12
#    ./mergedata 2 $NLOFilesToCombine
#    mv fort.12 pwgNLO-$startSeed-$endSeed-mode-2.top
#    echo "Output file = "`ls pwgNLO-$startSeed-$endSeed-mode-2.top`
#    mkdir -p NLO-output
   mv  $NLOFilesToCombine                    NLO-output/ 
#    mv  pwgNLO-$startSeed-$endSeed-mode-1.top combined-output/ 
#    mv  pwgNLO-$startSeed-$endSeed-mode-2.top combined-output/ 
# fi
(echo -n Ending   st2 ' ' ; date ) >> Timings/Timings-14.txt
#
fi
#
###########################################################################
###########################################################################
#                                                                         #
#        Determine upper bounding envelope for veto algorithm             #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_st3 -eq 1 ] ; then
#
# Compute upper bounding coefficients for radiation.
# Expect ~5 mins to run on a single CPU nubound=1,000,000.
cat powheg.input-save | sed 's/parallelstage.*/parallelstage 3/' > powheg.input
(echo -n ' ' ) >> Timings/Timings-14.txt
(echo -n Starting st3 ' ' ; date ) >> Timings/Timings-14.txt
for i in `seq $startSeed $endSeed`
do
echo $i | ./pwhg_main > run-st3-$i.log 2>&1 &
done
wait
(echo -n Ending   st3 ' ' ; date ) >> Timings/Timings-14.txt
#
###########################################################################
# Tidy up
mv pwgcounters-st3-*.dat    technical-outputs/
mv pwg-st3-*-stat.dat       technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
mv run-st3-*.log            log-files/
mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   technical-outputs/
mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  technical-outputs/
#
fi
#
#
#
#
###########################################################################
###########################################################################
#                                                                         #
#                   Define helper function for later                      #
#                                                                         #
###########################################################################
###########################################################################
# Define auxiliary helper function
function char {
        case $1 in
            [1-9])           			echo 000$1 ;;
            [1-9][0-9])      			echo 00$1  ;;
            [1-9][0-9][0-9]) 			echo 0$1   ;;
				[1-9][0-9][0-9][0-9]) 	echo $1    ;;
        esac
}
#
###########################################################################
###########################################################################
#                                                                         #
#  Initiate BIG LOOP over generation of events, reweighting and analysis  #
#                                                                         #
###########################################################################
###########################################################################
#
#
#
#
for BigLoop in `seq 1 $maxBigLoops`
do
#
#
#
#
###########################################################################
###########################################################################
#                                                                         #
#                     Generate Les Houches events                         #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_st4 -eq 1 ] ; then
# remove the tmp/kh14-`basename $basedir`/ folder if it exists
rm -rf /tmp/kh14-`basename $basedir`/
mkdir /tmp/kh14-`basename $basedir`/
cp $basedir/*.dat             /tmp/kh14-`basename $basedir`/
cp $basedir/powheg.input      /tmp/kh14-`basename $basedir`/
cp $basedir/powheg.input-save /tmp/kh14-`basename $basedir`/
cp $basedir/pwhg_main         /tmp/kh14-`basename $basedir`/
cp $basedir/lhef_analysis     /tmp/kh14-`basename $basedir`/
cp $basedir/main-PYTHIA-lhef  /tmp/kh14-`basename $basedir`/
cp $basedir/main-PYTHIA8_31-lhef /tmp/kh14-`basename $basedir`/
cp $basedir/main31.cmnd /tmp/kh14-`basename $basedir`/
cp $basedir/mergedata         /tmp/kh14-`basename $basedir`/
cd /tmp/kh14-`basename $basedir`/
#
# Generate events.
# Expect ~1 hour 15 mins to run on a single CPU numevt=1,500,000.
# 1,500,000 events in a .lhe file should be ~ 3.3Gb.
# So 16 such jobs would take up 55 Gb uncompressed! (~12 Gb when compressed)
#
cat powheg.input-save | sed 's/parallelstage.*/parallelstage 4/' > powheg.input
(echo -n ' ' ) >> $basedir/Timings/Timings-14.txt
(echo -n Started  st4  BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
for i in `seq $startSeed $endSeed`
do
    ch=`char $i`
    echo $i | ./pwhg_main > run-st4-$ch.log 2>&1 &
done
wait
#
###########################################################################
# Tidy up
mv pwgcounters-st4-*.dat    $basedir/technical-outputs/
mv pwgboundviolations-*.dat $basedir/technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv \
   $basedir/technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          \
   $basedir/technical-outputs/
mv run-st4-*.log            $basedir/log-files/
mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   $basedir/technical-outputs/
mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  $basedir/technical-outputs/
#
# ###########################################################################
# # Merge any pwhgalone-output analysis files that came out
echo ""
pwhgaloneFilesToCombine=`ls *pwhgalone-output[0-9][0-9][0-9][0-9].top`
# if [ "$pwhgaloneFilesToCombine" = "" ] ; then
#    echo "Finished st4 and found no \*pwhgalone-output\*.top files to merge."
# else
#    echo "About to merge files: "$pwhgaloneFilesToCombine
#    rm -rf fort.12
#    ./mergedata 1 $pwhgaloneFilesToCombine
#    mv fort.12 pwhgalone-output-$startSeed-$endSeed-mode-1.top
#    echo "Output file = "`ls pwhgalone-output-$startSeed-$endSeed-mode-1.top`
#    rm -rf fort.12
#    ./mergedata 2 $pwhgaloneFilesToCombine
#    mv fort.12 pwhgalone-output-$startSeed-$endSeed-mode-2.top
#    echo "Output file = "`ls pwhgalone-output-$startSeed-$endSeed-mode-2.top`
#    mkdir -p $basedir/pwhgalone-output
   mv  $pwhgaloneFilesToCombine $basedir/pwhgalone-output
#    mv pwhgalone-output-$startSeed-$endSeed-mode-1.top $basedir/combined-output/
#    mv pwhgalone-output-$startSeed-$endSeed-mode-2.top $basedir/combined-output/
# fi
# #
(echo -n Finished st4  BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
#
###########################################################################
###########################################################################
#                                                                         #
#      Add 7 point scale variation to event files by reweighting          #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_rwgt -eq 1 ] ; then
#
# Now all events are available. This is an example of using the reweighting
# feature. We compute reweighting information for the 7 points scale variation
#
(echo -n ' ' ) >> $basedir/Timings/Timings-14.txt
(echo -n Started  rwgt BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
for iscales in {1..7}
do
    case $iscales in
        1) facscfact=1   ; renscfact=1   ;;
        2) facscfact=0.5 ; renscfact=0.5 ;;
        3) facscfact=0.5 ; renscfact=1   ;;
        4) facscfact=1   ; renscfact=0.5 ;;
        5) facscfact=2   ; renscfact=1   ;;
        6) facscfact=1   ; renscfact=2   ;;
        7) facscfact=2   ; renscfact=2   ;;
    esac
# must be at the parallel stage 4, and the files generated at the previous
# stages must be present.
    cat  powheg.input-save | sed "s/parallelstage.*/parallelstage 4/ ; s/storeinfo_rwgt/compute_rwgt/ ; s/facscfact.*/facscfact $facscfact/ ; s/renscfact.*/renscfact $renscfact/ " > powheg.input
    for i in `seq $startSeed $endSeed`
    do
        ch=`char $i`

        ./pwhg_main <<EOF > run-rwgt-$i.log 2>&1 &
$i
pwgevents-$ch.lhe
EOF
            
    done

    wait
        
    for i in `seq $startSeed $endSeed`
    do
        ch=`char $i`
        \mv -f pwgevents-rwgt-$ch.lhe pwgevents-$ch.lhe 
        
    done
    
done
#
mv run-rwgt-*.log $basedir/log-files/
(echo -n Finished rwgt BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
#
fi
#
#
###########################################################################
###########################################################################
#                                                                         #
#                            TAR UP EVENT FILES                           #
#                   AND SEND BACK BEFORE ANYTHING GOES WRONG              #
#                                                                         #
###########################################################################
###########################################################################
# Compress the event files to save space.
#
(echo -n Started tarring up files, BigLoop is $BigLoop ' ' ; date ) >> Timings/Timings-14.txt
filesToCopy=""
for i in *.lhe
do 
    filesToCopy=$filesToCopy" "$i.tar.gz
    tar -czf $i.tar.gz $i &
done
wait
cp $filesToCopy $basedir/
rm $filesToCopy
(echo -n Finished tarring up files, BigLoop is $BigLoop ' ' ; date ) >> Timings/Timings-14.txt
#
# Don't need these files anymore for lhef_analysis etc, so remove
# we remove them to keep space
rm /tmp/kh14-`basename $basedir`/*.dat
rm /tmp/kh14-`basename $basedir`/powheg.input
rm /tmp/kh14-`basename $basedir`/pwhg_main
#
###########################################################################
###########################################################################
#                                                                         #
#                    Analyse events with lhef_analysis                    #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_lhef -eq 1 ] ; then
#
(echo -n ' ' ) >> $basedir/Timings/Timings-14.txt
(echo -n Started  lhef BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
cp powheg.input-save powheg.input
for i in `seq $startSeed $endSeed`
do
    ch=`char $i`
    file=pwgevents-$ch.lhe
    log=lhef_analysis-$ch.log
    echo $file | ./lhef_analysis > $log &
done
wait
# ###########################################################################
# # Merge any pwgLHEF_analysis-[0-9][0-9][0-9][0-9]-W$i.top analysis files
# # that came out
echo ""
for i in `seq 1 7`
do
    LHEFFilesToCombine=`ls pwgLHEF_analysis-[0-9][0-9][0-9][0-9]-W$i.top`
#     if [ "$LHEFFilesToCombine" = "" ] ; then
#         echo "Finished lhef_analysis and found no  pwgLHEF_analysis-\*-W$i.top files to merge."
#     else
#        echo "About to merge files: "$LHEFFilesToCombine
#        rm -rf fort.12
#        ./mergedata 1 $LHEFFilesToCombine
#        mv fort.12 pwgLHEF_analysis-W$i-$startSeed-$endSeed-mode-1.top
#        echo "Output file = "`ls pwgLHEF_analysis-W$i-$startSeed-$endSeed-mode-1.top`
#        rm -rf fort.12
#        ./mergedata 2 $LHEFFilesToCombine
#        mv fort.12 pwgLHEF_analysis-W$i-$startSeed-$endSeed-mode-2.top
#        echo "Output file = "`ls pwgLHEF_analysis-W$i-$startSeed-$endSeed-mode-2.top`
#        mkdir -p $basedir/LHEF-output
       mv  $LHEFFilesToCombine $basedir/LHEF-output
#        mv pwgLHEF_analysis-W$i-$startSeed-$endSeed-mode-1.top \
#        $basedir/combined-output/
#        mv pwgLHEF_analysis-W$i-$startSeed-$endSeed-mode-2.top \
#        $basedir/combined-output/
#     fi
done
# #
mv lhef_analysis-*.log $basedir/log-files/
(echo -n Finished lhef BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
#
fi
#
###########################################################################
###########################################################################
#                                                                         #
#                  Analyse events with main-PYTHIA-lhef                   #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_py6 -eq 1 ] ; then
#
(echo -n ' ' ) >> $basedir/Timings/Timings-14.txt
(echo -n Started  Py6  BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
cp powheg.input-save powheg.input
for i in `seq $startSeed $endSeed`
do
    ch=`char $i`
    file=pwgevents-$ch.lhe
    log=main-PYTHIA-lhef-$i.log
    echo $file | ./main-PYTHIA-lhef > $log &
done
wait
# ###########################################################################
# # Merge any pwgPOWHEG+PYTHIA-output-W[1-9].top analysis files that came out
echo ""
for i in `seq 1 7`
do
    PYTHIA6FilesToCombine=`ls pwg-[0-9][0-9][0-9][0-9]*POWHEG+PYTHIA-output-W$i.top`
#     if [ "$PYTHIA6FilesToCombine" = "" ] ; then
#         echo "Finished main-PYTHIA-lhef and found no pwg-\*POWHEG+PYTHIA-output-W$i.top files to merge."
#     else
#         echo "About to merge files: "$PYTHIA6FilesToCombine
#         rm -rf fort.12
#         ./mergedata 1 $PYTHIA6FilesToCombine
#         mv fort.12 pwgPOWHEG+PYTHIA-output-W$i-$startSeed-$endSeed-mode-1.top
#         echo "Output file = "`ls pwgPOWHEG+PYTHIA-output-W$i-$startSeed-$endSeed-mode-1.top`
#         rm -rf fort.12
#         ./mergedata 2 $PYTHIA6FilesToCombine
#         mv fort.12 pwgPOWHEG+PYTHIA-output-W$i-$startSeed-$endSeed-mode-2.top
#         echo "Output file = "`ls pwgPOWHEG+PYTHIA-output-W$i-$startSeed-$endSeed-mode-2.top`
#         mkdir -p $basedir/PYTHIA6-output
        mv  $PYTHIA6FilesToCombine $basedir/PYTHIA6-output
#         mv pwgPOWHEG+PYTHIA-output-W$i-$startSeed-$endSeed-mode-1.top \
# 	$basedir/combined-output/
#         mv pwgPOWHEG+PYTHIA-output-W$i-$startSeed-$endSeed-mode-2.top \
# 	$basedir/combined-output/
#     fi
done
# #
mv main-PYTHIA-lhef-*.log $basedir/log-files/
(echo -n Finished Py6  BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
#
fi
#
###########################################################################
###########################################################################
#                                                                         #
#                Analyse events with main-PYTHIA8_31-lhef                    #
#                                                                         #
###########################################################################
###########################################################################
if [ $do_py8 -eq 1 ] ; then
#
(echo -n ' ' ) >> $basedir/Timings/Timings-14.txt
(echo -n Started  Py8  BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
cp powheg.input-save powheg.input
for i in `seq $startSeed $endSeed`
do
    ch=`char $i`
    file=pwgevents-$ch.lhe
    log=main-PYTHIA8_31-lhef-$i.log
    echo $file | ./main-PYTHIA8_31-lhef > $log &
done
wait
# ###########################################################################
# # Merge any pwgPOWHEG+PYTHIA8-output-W[1-9].top analysis files that came out
echo ""
for i in `seq 1 7`
do
    PYTHIA8FilesToCombine=`ls pwgPOWHEG+PYTHIA8-output-[0-9][0-9][0-9][0-9]-W$i.top`
#     if [ "$PYTHIA8FilesToCombine" = "" ] ; then
#         echo "Finished main-PYTHIA-lhef and found no pwg-\*POWHEG+PYTHIA8-output-W$i.top files to merge."
#     else
#         echo "About to merge files: "$PYTHIA8FilesToCombine
#         rm -rf fort.12
#         ./mergedata 1 $PYTHIA8FilesToCombine
#         mv fort.12 pwgPOWHEG+PYTHIA8-output-W$i-$startSeed-$endSeed-mode-1.top
#         echo "Output file = "`ls pwgPOWHEG+PYTHIA8-output-W$i-$startSeed-$endSeed-mode-1.top`
#         rm -rf fort.12
#         ./mergedata 2 $PYTHIA8FilesToCombine
#         mv fort.12 pwgPOWHEG+PYTHIA8-output-W$i-$startSeed-$endSeed-mode-2.top
#         echo "Output file = "`ls pwgPOWHEG+PYTHIA8-output-W$i-$startSeed-$endSeed-mode-2.top`
#         mkdir -p $basedir/PYTHIA8-output
        mv  $PYTHIA8FilesToCombine $basedir/PYTHIA8-output
#         mv pwgPOWHEG+PYTHIA8-output-W$i-$startSeed-$endSeed-mode-1.top \
# 	$basedir/combined-output/
#         mv pwgPOWHEG+PYTHIA8-output-W$i-$startSeed-$endSeed-mode-2.top \
# 	$basedir/combined-output/
#     fi
done
# #
mv main-PYTHIA8_31-lhef-*.log $basedir/log-files/
(echo -n Finished Py8  BigLoop is $BigLoop ' ' ; date ) >> $basedir/Timings/Timings-14.txt
#
fi
#
###########################################################################
###########################################################################
#                                                                         #
#               Clean up before next cycle of BigLoop                     #
#                                                                         #
###########################################################################
###########################################################################
#
rm -f /tmp/kh14-`basename $basedir`/*.dat
rm -f /tmp/kh14-`basename $basedir`/powheg.input
rm -f /tmp/kh14-`basename $basedir`/powheg.input-save
rm -f /tmp/kh14-`basename $basedir`/pwhg_main
rm -f /tmp/kh14-`basename $basedir`/lhef_analysis
rm -f /tmp/kh14-`basename $basedir`/main-PYTHIA-lhef
rm -f /tmp/kh14-`basename $basedir`/main-PYTHIA8_31-lhef
cd /tmp
rm -rf /tmp/kh14-`basename $basedir`
cd $basedir
#
fi   # End of if [ $do_st4  -eq 1 ] block
#
#
###########################################################################
###########################################################################
#                                                                         #
#   End of BigLoop over generation of events, reweighting and analysis    #
#                                                                         #
###########################################################################
###########################################################################
#
# To restart now from the event generation phase we should remove any
# .lhe that are lying around to avoid disk issues. Previous .lhe.tar.gz
# are a factor 5 smaller than .lhe so we leave them where they are safely.
# There shouldn't be any .lhe, only .lhe.tar.gz, but to be on the safe
# side we delete them
rm *.lhe
# Then we have to take care to shift the starting and ending seeds up so
# they don't overlap the ones we already ran with, to avoid generating
# identical events over again.

#startSeed=$((endSeed+1))

# DQ - now that we have nScripts, we need to offset the
# startSeed so we don't overlap with other scripts
startSeed=$((startSeed+(nJobs*nScripts)))
endSeed=$((startSeed+nJobs-1))
#
done
#
#
#
#
###########################################################################
###########################################################################
#                                                                         #
#                             **** THE END ****                           #
#                                                                         #
###########################################################################
###########################################################################
#
#
#
#
#
#
#
exit
exit
exit
exit
exit
exit
exit
#
#
#
#
#
#
#
